define(["jquery","moment","ect","bootstrap"],function(t,e,n){function o(t){h=t}function s(){var e=t(".inputName").val();e.length<=2?alert("Ник должен быть длинее 2-х символов!"):h.auth(e)}function i(){if(t(this).is(".active"))return!1;var e=t(".list-rooms>.active");0!=e.length&&h.room_disconnect(e.text()),t(".list-rooms>div").removeClass("active"),t(this).addClass("active"),h.room_set(t(this).text(),t(this).data("id"))}function a(e){var n=[];e.forEach(function(e){n.push(t(v.render("list-item.ect",{text:e})))}),t(".list-users").html(n)}function r(e){var n=[];for(var o in e)n.push(t(v.render("list-item.ect",{text:o,id:e[o]})).click(i));t(".list-rooms").html(n)}function c(e){t(".connect_modal .modal-body").text("Сервер не отвечат, попытка подключиться #"+e),m(".connect_modal"),m(".auth_modal",!0)}function d(e,n){t(e).keypress(function(t){13==t.which&&n(e)}),t(e).find("button").click(function(){n(e)})}function m(e,n){n?t(e).modal("hide"):t(e).modal({backdrop:"static",keyboard:!1})}function u(t){var n=e(parseInt(t));return 0==e().diff(n,"days")?n.format("HH:mm:ss"):n.format("DD.MM.YY")}function l(e,n,o,s){if(!e||!n)return!1;if("Вы"==e||e==window.nick){e="Вы";var i='<span class="del_message">'+u(o)+"</span>"}else var i=u(o);t(".list-messages").prepend(v.render("message.ect",{name:e,text:n,date:i,id:s}))}function f(t,e,n){n.send(JSON.stringify({type:t,data:e}))}var h,v=n({root:"/templates"});return{add_mess:l,get_date:u,modal:m,form_on:d,disconnect:c,update_room:r,update_users:a,room_select:i,auth_check:s,set_socket:o,send_socket:f}});
//# sourceMappingURL=data:application/json;base64,
